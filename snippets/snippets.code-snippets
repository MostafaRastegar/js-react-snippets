{
  // js
  "Export Constant": {
    "prefix": "exc",
    "body": "export const ${1:name} = '${2:value}'",
    "description": "Export const"
  },
  "Export Default": {
    "prefix": "exd",
    "body": ["export default ${1:name}"],
    "description": "Export default"
  },
  "Export Class": {
    "prefix": "excls",
    "body": "export default class ${1:className} {\n\t$0\n}\n",
    "description": "Export default class in ES6 syntax"
  },
  "Export Class Extends": {
    "prefix": "exclse",
    "body": "export default class ${1:className} extends ${2:baseClassName} {\n\t$0\n}\n",
    "description": "Export default class which extends a base one in ES6 syntax"
  },

  "Export Named Function": {
    "prefix": "exnfn",
    "body": "export const ${1:functionName} = (${2:params}) => {\n\t$0\n}\n",
    "description": "Export named function in ES6 syntax"
  },
  "Export Named Variable": {
    "prefix": "exnv",
    "body": "export const ${1:exportVariable} = ${2:localVariable}\n",
    "description": "Export named variable in ES6 syntax"
  },

  "Module Exports": {
    "prefix": "mdex",
    "body": "module.exports = {\n\t$0\n}\n",
    "description": "Module exports from Common JS, node syntax at ES6"
  },

  "Eslint Disable Line": {
    "prefix": "edl",
    "body": "// eslint-disable-line",
    "description": "Eslint Disable Line"
  },
  "Eslint Disable Next Line": {
    "prefix": "ednl",
    "body": "// eslint-disable-next-line",
    "description": "Eslint Disable Next Line"
  },

  "Comment Block": {
    "prefix": "cm",
    "body": ["/**", " * ${1:comment}", " */"]
  },
  "Comment Big Block": {
    "prefix": "cmb",
    "body": [
      "/**",
      "|--------------------------------------------------",
      "| ${1:comment}",
      "|--------------------------------------------------",
      "*/"
    ]
  },
  "Comment Big Line": {
    "prefix": "cmbl",
    "body": "// =============== ${1:comment} ==============="
  },

  "Print Console.log": {
    "prefix": "clg",
    "body": [
      "console.log('===== start ${1:log} =======>');",
      "console.log(${2:log});",
      "console.log('<==== end   =======');"
    ],
    "description": "Log output to console"
  },
  "Console Log Object": {
    "prefix": "clgo",
    "body": "console.log('${1:object} :>> ', ${1:object});",
    "description": "Displays an object in the console with its name"
  },
  "Console Table": {
    "prefix": "clt",
    "body": "console.table(${1:array});",
    "description": "Displays tabular data as a table"
  },
  "Console Clear": {
    "prefix": "clc",
    "body": "console.clear();",
    "description": "Clears the console"
  },
  "Print Console.time": {
    "prefix": "clti",
    "body": [
      "console.time('${1:log}');",
      "(function(){\n ${2:// yourFunction} \n})()",
      "console.timeEnd('${1:log}');"
    ],
    "description": "Log time of run for input function"
  },

  "Then Catch": {
    "prefix": "thc",
    "body": ".then((${1:result}) => {\n\t${2}\n}).catch((${3:err}) => {\n\t${4}\n})",
    "description": "Add the .then and .catch methods to handle promises"
  },

  "SetTimeOut": {
    "prefix": "sto",
    "body": "setTimeout(() => {\n\t${2}\n}, ${1:delayInms})",
    "description": "Executes the given function after the specified delay in ES6 syntax"
  },

  "SetInterval": {
    "prefix": "sti",
    "body": "setInterval(() => {\n\t${2}\n}, ${0:intervalInms})",
    "description": "Executes the given function at specified intervals in ES6 syntax"
  },

  "Destructing Object": {
    "prefix": "deso",
    "body": "const {${2:propertyName}} = ${1:objectToDestruct}",
    "description": "Creates and assigns a local variable using object destructing"
  },
  "Destructing Array": {
    "prefix": "desr",
    "body": "const [${2:propertyName}] = ${1:arrayToDestruct}",
    "description": "Creates and assigns a local variable using array destructing"
  },

  "Named Function": {
    "prefix": "nfn",
    "body": "const ${1:name} = (${2:params}) => {\n\t${3}\n}",
    "description": "Creates a named function in ES6 syntax"
  },
  "Anonymous Function": {
    "prefix": "afn",
    "body": "(${1:params}) => {\n\t${2}\n}",
    "description": "Creates an anonymous function in ES6 syntax"
  },

  "ForEach": {
    "prefix": "fre",
    "body": "${1:array}.forEach(${2:currentItem} => {\n\t${0}\n})",
    "description": "Creates a forEach statement in ES6 syntax"
  },

  "Property Get": {
    "prefix": "pget",
    "body": "get ${1:propertyName}() {\n\treturn this.${0:value}\n}",
    "description": "Creates a getter property inside a class in ES6 syntax"
  },
  "Property Set": {
    "prefix": "pset",
    "body": "set ${1:propertyName}(${2:value}) {\n\t${0}\n}",
    "description": "Creates a setter property inside a class in ES6 syntax"
  },
  "method": {
    "prefix": "met",
    "body": "${1:methodName}(${2:params}) {\n\t${0}\n}",
    "description": "Creates a method inside a class in ES6 syntax"
  },

  "Javascript Map": {
    "prefix": "jmap",
    "body": ["${1:array}.map( ${2:item} => ${3:customCode})"],
    "description": "Javascript Map"
  },

  "Require To Const": {
    "prefix": "reqc",
    "body": "const ${2:packageName} = require('${1:package}')$0",
    "description": "Require a package to const"
  },
  "Require": {
    "prefix": "req",
    "body": "require('${1:package}')",
    "description": "Require a package"
  },
  "Import As": {
    "prefix": "ima",
    "body": "import { ${2:originalName} as ${3:alias} } from '${1:module}'$0",
    "description": "Imports a specific portion of the module by assigning a local alias in ES6 syntax"
  },
  "Import Everything": {
    "prefix": "ime",
    "body": "import * as ${2:alias} from '${1:module}'$0",
    "description": "Imports everything as alias from the module in ES6 syntax"
  },
  "Import": {
    "prefix": "imp",
    "body": "import ${2:moduleName} from '${1:module}'$0",
    "description": "Imports entire module statement in ES6 syntax"
  },
  "Import Destructing": {
    "prefix": "imdes",
    "body": "import { $2 } from '${1:module}'$0",
    "description": "Imports only a portion of the module in ES6 syntax"
  },
  "Import No Module Name": {
    "prefix": "imn",
    "body": "import '${1:module}'$0",
    "description": "Imports entire module in ES6 syntax without module name"
  },

  "Constructor": {
    "prefix": "con",
    "body": "constructor(${1:params}) {\n\t${0}\n}",
    "description": "Add default constructor in a class in ES6 syntax"
  },

  // react
  "Import React": {
    "prefix": "imr",
    "body": ["import React from 'react'"]
  },
  "Import PropTypes": {
    "prefix": "impt",
    "body": ["import PropTypes from 'prop-types'"],
    "description": "Import PropTypes"
  },
  "React propTypes": {
    "prefix": "rpt",
    "body": [
      "${1:componentName}.propTypes = {",
      "${2:property}: PropTypes.${3:value}",
      "}"
    ],
    "description": "Add propTypes"
  },

  "Import Styled-Components": {
    "prefix": "ims",
    "body": "import styled from 'styled-components'",
    "description": "Import Styled-Components"
  },

  "Stateless Component": {
    "prefix": "slc",
    "body": [
      "const ${1:componentName} = () => (",
      "\t$2",
      ")",
      "",
      "export default ${1:componentName}"
    ]
  },

  "Stateless Component Return": {
    "prefix": "slcr",
    "body": [
      "const ${1:componentName} = () => {",
      "\treturn (",
      "\t\t$2",
      "\t);",
      "}",
      "",
      "export default ${1:componentName}"
    ]
  },

  "Styled Component": {
    "prefix": "styc",
    "body": ["const ${1:componentName} = styled.${2:name}`", "\t$3", "`"]
  },
  "Export Styled Component": {
    "prefix": "exstyc",
    "body": ["export const ${1:componentName} = styled.${2:name}`", "\t$3", "`"]
  },
  "Export Default Styled Component": {
    "prefix": "exdstyc",
    "body": ["export default styled.${1:elementName}`", "\t$2", "`"]
  },
  "Import React Effect": {
    "prefix": "imre",
    "body": ["import React, {${1:effectName}} from 'react'"]
  },
  "React useEffect": {
    "prefix": "rue",
    "body": ["useEffect(() => {$1},[${2:dependency}])"]
  },
  "React useState": {
    "prefix": "rus",
    "body": ["const [${1:value}, set${2:Value}] = useState(${3:value})"]
  },
  "Import ClassNames": {
    "prefix": "imcn",
    "body": ["import classNames from 'classnames'"],
    "description": "Import classNames"
  },

  // redux
  "Redux Reducer": {
    "prefix": "rrd",
    "body": [
      "export default (state = $1, action) => {",
      "\tswitch (action.type) {",
      "\t\tcase $2:",
      "\t\t\t$3",
      "\t\tdefault:",
      "\t\t\treturn state;",
      "\t}",
      "};"
    ]
  },
  "Redux Pure Function": {
    "prefix": "rpfn",
    "body": [
      "export const $1 = '$1';",
      "",
      "export function $2($3) {",
      "\treturn {",
      "\t\ttype: $1,",
      "\t\t$3",
      "\t}",
      "}"
    ]
  },
  "Redux Pure Function Const": {
    "prefix": "rpfnc",
    "body": [
      "export const $1 = '$1';",
      "",
      "export const $2 = $3 => ({",
      "\ttype: $1,",
      "\t$3",
      "});"
    ]
  },
  "Import Connect From React-redux": {
    "prefix": "imrdcn",
    "body": "import { connect } from 'react-redux';"
  },
  "Export Redux Connect": {
    "prefix": "exrdcn",
    "body": [
      "export default connect(",
      "mapStateToProps",
      "mapDispatchToProps",
      ")($1)"
    ]
  },

  // test
  "Test": {
    "prefix": "tt",
    "body": ["test('$1', () => {", "\t$2", "});"]
  },
  "Test Describe": {
    "prefix": "tdes",
    "body": ["describe('$1', () => {", "\t$2", "});"]
  },
  "Test it": {
    "prefix": "tit",
    "body": ["it('should $1', ($3) => {", "\t$4", "});"]
  }
}
